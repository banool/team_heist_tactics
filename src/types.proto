// These definition work under the assumption that the server will be
// sending the client the full state of the game every time.
// Support for sending a delta can come later.

// TODO How to describe where a tile is in relation to other tiles.

syntax = "proto3";
package types;

// This is the "primary key" to each of the heisters.
// The other two are just flavour.
enum HeisterColor {
  YELLOW = 0;
  PURPLE = 1;
  GREEN = 2;
  ORANGE = 3;
}

// The symbol of a heister. This is just used for flavour / accessibility.
enum HeisterSymbol {
  SWORD = 0;
  VIAL = 1;
  BOW = 2;
  AXE = 3;
}
  
// The name of a heister. This is just used for flavour / accessibility.
enum HeisterName {
  BARBARIAN = 0;
  MAGE = 1;
  ELF = 2;
  DWARF = 3;
}
  
// This is used to describe the position of a heister on a tile.
// Should be in the range of (0,0) to (3,3).
message Position {
  uint32 x = 1;
  uint32 y = 2;
}

// Describes a tile, which is essentially just 16 squares.
// These squares run left to right, top to bottom.
message Tile {
  repeated Square squares = 1;
}

// Describes a square, which is 1 of 16 units of a tile.
// A square has 4 walls and a type.
message Square {
  WallType north_wall = 1;
  WallType east_wall = 2;
  WallType south_wall = 3;
  WallType west_wall = 4;
  SquareType square_type = 5;
}

// Describes what type of square the square is.
enum SquareType {
  NORMAL = 0;
  YELLOW_TELEPORT_PAD = 1;
  PURPLE_TELEPORT_PAD = 2;
  GREEN_TELEPORT_PAD = 3;
  ORANGE_TELEPORT_PAD = 4;
  YELLOW_ITEM = 5;
  PURPLE_ITEM = 6;
  GREEN_ITEM = 7;
  ORANGE_ITEM = 8;
  YELLOW_ESCAPE = 9;
  PURPLE_ESCAPE = 10;
  GREEN_ESCAPE = 11;
  ORANGE_ESCAPE = 12;
  ESCALATOR = 13;
  TIMER_FLIP = 14;
  TIMER_FLIP_USED = 15;
  FILLED = 16;  // A block that you can't enter.
}

// Describes the type of a wall.
enum WallType {
  CLEAR = 0;
  IMPASSABLE = 1;
  YELLOW_DOOR = 2;
  PURPLE_DOOR = 3;
  GREEN_DOOR = 4;
  ORANGE_DOOR = 5;
}

// Information about each heister. A heister is one of the
// four movable game tokens, not the players themselves.
message Heister {
  // Color of the heister.
  HeisterColor heister_color = 1;
  
  // Whether the heister has taken their item.
  bool has_taken_item = 2;

  // Whether the heister has reached the escape.
  bool has_escaped = 3;
}

// Things a player can do
enum Ability {
  MOVE_NORTH = 0;
  MOVE_EAST = 1;
  MOVE_SOUTH = 2;
  MOVE_WEST = 3;
  TELEPORT = 4;
  REVEAL_TILES = 5;
  USE_ESCALATOR = 6;
} 

// Information about the players themselves.
message Player {
  // Things the player can do.
  repeated Ability abilities = 1; 
}

// Whether the game is ongoing or has been won / lost.
enum GameStatus {
  STAGING = 0;
  ONGOING = 1;
  VICTORY = 2;
  DEFEAT = 3; 
}

// Captures all information related to the game.
message GameState {
  // Word(s) that points to this game instance.
  string game_name = 1;

  // A unixtime saying when the game started.
  uint64 game_started = 2;

  // A unixtime saying when the timer runs out.
  uint64 timer_runs_out = 3;

  // Captures the state of the game board.
  repeated Tile tiles = 4;

  // Captures the state of the heisters.
  repeated Heister heisters = 5;

  // Whether all items have been taken.
  bool all_items_taken = 6;

  // Number of tiles that remain to be revealed.
  uint32 remaining_tile = 7;

  // Result of the game.
  GameStatus game_status = 8;
}


