// source: types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.types.Ability', null, global);
goog.exportSymbol('proto.types.GameState', null, global);
goog.exportSymbol('proto.types.GameStatus', null, global);
goog.exportSymbol('proto.types.Heister', null, global);
goog.exportSymbol('proto.types.HeisterColor', null, global);
goog.exportSymbol('proto.types.HeisterName', null, global);
goog.exportSymbol('proto.types.HeisterSymbol', null, global);
goog.exportSymbol('proto.types.InvalidRequest', null, global);
goog.exportSymbol('proto.types.MainMessage', null, global);
goog.exportSymbol('proto.types.MainMessage.BodyCase', null, global);
goog.exportSymbol('proto.types.MapPosition', null, global);
goog.exportSymbol('proto.types.Move', null, global);
goog.exportSymbol('proto.types.Player', null, global);
goog.exportSymbol('proto.types.Square', null, global);
goog.exportSymbol('proto.types.SquareType', null, global);
goog.exportSymbol('proto.types.Tile', null, global);
goog.exportSymbol('proto.types.TilePosition', null, global);
goog.exportSymbol('proto.types.WallType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TilePosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.TilePosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.TilePosition.displayName = 'proto.types.TilePosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.MapPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.MapPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.MapPosition.displayName = 'proto.types.MapPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Tile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Tile.repeatedFields_, null);
};
goog.inherits(proto.types.Tile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Tile.displayName = 'proto.types.Tile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Square = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Square, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Square.displayName = 'proto.types.Square';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Heister = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Heister, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Heister.displayName = 'proto.types.Heister';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Player.repeatedFields_, null);
};
goog.inherits(proto.types.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Player.displayName = 'proto.types.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.GameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.GameState.repeatedFields_, null);
};
goog.inherits(proto.types.GameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.GameState.displayName = 'proto.types.GameState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Move = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Move, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Move.displayName = 'proto.types.Move';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.InvalidRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.InvalidRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.InvalidRequest.displayName = 'proto.types.InvalidRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.MainMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.types.MainMessage.oneofGroups_);
};
goog.inherits(proto.types.MainMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.MainMessage.displayName = 'proto.types.MainMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TilePosition.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TilePosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TilePosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TilePosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TilePosition}
 */
proto.types.TilePosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TilePosition;
  return proto.types.TilePosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TilePosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TilePosition}
 */
proto.types.TilePosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TilePosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TilePosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TilePosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TilePosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 x = 1;
 * @return {number}
 */
proto.types.TilePosition.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.TilePosition} returns this
 */
proto.types.TilePosition.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 y = 2;
 * @return {number}
 */
proto.types.TilePosition.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.TilePosition} returns this
 */
proto.types.TilePosition.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.MapPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.types.MapPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.MapPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MapPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.MapPosition}
 */
proto.types.MapPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.MapPosition;
  return proto.types.MapPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.MapPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.MapPosition}
 */
proto.types.MapPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.MapPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.MapPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.MapPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MapPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
};


/**
 * optional sint32 x = 1;
 * @return {number}
 */
proto.types.MapPosition.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.MapPosition} returns this
 */
proto.types.MapPosition.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sint32 y = 2;
 * @return {number}
 */
proto.types.MapPosition.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.MapPosition} returns this
 */
proto.types.MapPosition.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Tile.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Tile.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Tile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Tile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Tile.toObject = function(includeInstance, msg) {
  var f, obj = {
    squaresList: jspb.Message.toObjectList(msg.getSquaresList(),
    proto.types.Square.toObject, includeInstance),
    position: (f = msg.getPosition()) && proto.types.MapPosition.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Tile}
 */
proto.types.Tile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Tile;
  return proto.types.Tile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Tile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Tile}
 */
proto.types.Tile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Square;
      reader.readMessage(value,proto.types.Square.deserializeBinaryFromReader);
      msg.addSquares(value);
      break;
    case 2:
      var value = new proto.types.MapPosition;
      reader.readMessage(value,proto.types.MapPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Tile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Tile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Tile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Tile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSquaresList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.Square.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.MapPosition.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated Square squares = 1;
 * @return {!Array<!proto.types.Square>}
 */
proto.types.Tile.prototype.getSquaresList = function() {
  return /** @type{!Array<!proto.types.Square>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Square, 1));
};


/**
 * @param {!Array<!proto.types.Square>} value
 * @return {!proto.types.Tile} returns this
*/
proto.types.Tile.prototype.setSquaresList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.Square=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Square}
 */
proto.types.Tile.prototype.addSquares = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Square, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Tile} returns this
 */
proto.types.Tile.prototype.clearSquaresList = function() {
  return this.setSquaresList([]);
};


/**
 * optional MapPosition position = 2;
 * @return {?proto.types.MapPosition}
 */
proto.types.Tile.prototype.getPosition = function() {
  return /** @type{?proto.types.MapPosition} */ (
    jspb.Message.getWrapperField(this, proto.types.MapPosition, 2));
};


/**
 * @param {?proto.types.MapPosition|undefined} value
 * @return {!proto.types.Tile} returns this
*/
proto.types.Tile.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.Tile} returns this
 */
proto.types.Tile.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.Tile.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.types.Tile.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Tile} returns this
 */
proto.types.Tile.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Square.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Square.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Square} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Square.toObject = function(includeInstance, msg) {
  var f, obj = {
    northWall: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eastWall: jspb.Message.getFieldWithDefault(msg, 2, 0),
    southWall: jspb.Message.getFieldWithDefault(msg, 3, 0),
    westWall: jspb.Message.getFieldWithDefault(msg, 4, 0),
    squareType: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Square}
 */
proto.types.Square.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Square;
  return proto.types.Square.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Square} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Square}
 */
proto.types.Square.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.types.WallType} */ (reader.readEnum());
      msg.setNorthWall(value);
      break;
    case 2:
      var value = /** @type {!proto.types.WallType} */ (reader.readEnum());
      msg.setEastWall(value);
      break;
    case 3:
      var value = /** @type {!proto.types.WallType} */ (reader.readEnum());
      msg.setSouthWall(value);
      break;
    case 4:
      var value = /** @type {!proto.types.WallType} */ (reader.readEnum());
      msg.setWestWall(value);
      break;
    case 5:
      var value = /** @type {!proto.types.SquareType} */ (reader.readEnum());
      msg.setSquareType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Square.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Square.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Square} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Square.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNorthWall();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEastWall();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSouthWall();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getWestWall();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getSquareType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional WallType north_wall = 1;
 * @return {!proto.types.WallType}
 */
proto.types.Square.prototype.getNorthWall = function() {
  return /** @type {!proto.types.WallType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.types.WallType} value
 * @return {!proto.types.Square} returns this
 */
proto.types.Square.prototype.setNorthWall = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional WallType east_wall = 2;
 * @return {!proto.types.WallType}
 */
proto.types.Square.prototype.getEastWall = function() {
  return /** @type {!proto.types.WallType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.types.WallType} value
 * @return {!proto.types.Square} returns this
 */
proto.types.Square.prototype.setEastWall = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional WallType south_wall = 3;
 * @return {!proto.types.WallType}
 */
proto.types.Square.prototype.getSouthWall = function() {
  return /** @type {!proto.types.WallType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.types.WallType} value
 * @return {!proto.types.Square} returns this
 */
proto.types.Square.prototype.setSouthWall = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional WallType west_wall = 4;
 * @return {!proto.types.WallType}
 */
proto.types.Square.prototype.getWestWall = function() {
  return /** @type {!proto.types.WallType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.types.WallType} value
 * @return {!proto.types.Square} returns this
 */
proto.types.Square.prototype.setWestWall = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional SquareType square_type = 5;
 * @return {!proto.types.SquareType}
 */
proto.types.Square.prototype.getSquareType = function() {
  return /** @type {!proto.types.SquareType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.types.SquareType} value
 * @return {!proto.types.Square} returns this
 */
proto.types.Square.prototype.setSquareType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Heister.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Heister.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Heister} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Heister.toObject = function(includeInstance, msg) {
  var f, obj = {
    heisterColor: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mapPosition: (f = msg.getMapPosition()) && proto.types.MapPosition.toObject(includeInstance, f),
    hasTakenItem: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    hasEscaped: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Heister}
 */
proto.types.Heister.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Heister;
  return proto.types.Heister.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Heister} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Heister}
 */
proto.types.Heister.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.types.HeisterColor} */ (reader.readEnum());
      msg.setHeisterColor(value);
      break;
    case 2:
      var value = new proto.types.MapPosition;
      reader.readMessage(value,proto.types.MapPosition.deserializeBinaryFromReader);
      msg.setMapPosition(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasTakenItem(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasEscaped(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Heister.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Heister.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Heister} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Heister.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeisterColor();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMapPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.MapPosition.serializeBinaryToWriter
    );
  }
  f = message.getHasTakenItem();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getHasEscaped();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional HeisterColor heister_color = 1;
 * @return {!proto.types.HeisterColor}
 */
proto.types.Heister.prototype.getHeisterColor = function() {
  return /** @type {!proto.types.HeisterColor} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.types.HeisterColor} value
 * @return {!proto.types.Heister} returns this
 */
proto.types.Heister.prototype.setHeisterColor = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional MapPosition map_position = 2;
 * @return {?proto.types.MapPosition}
 */
proto.types.Heister.prototype.getMapPosition = function() {
  return /** @type{?proto.types.MapPosition} */ (
    jspb.Message.getWrapperField(this, proto.types.MapPosition, 2));
};


/**
 * @param {?proto.types.MapPosition|undefined} value
 * @return {!proto.types.Heister} returns this
*/
proto.types.Heister.prototype.setMapPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.Heister} returns this
 */
proto.types.Heister.prototype.clearMapPosition = function() {
  return this.setMapPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.Heister.prototype.hasMapPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool has_taken_item = 3;
 * @return {boolean}
 */
proto.types.Heister.prototype.getHasTakenItem = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.Heister} returns this
 */
proto.types.Heister.prototype.setHasTakenItem = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool has_escaped = 4;
 * @return {boolean}
 */
proto.types.Heister.prototype.getHasEscaped = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.Heister} returns this
 */
proto.types.Heister.prototype.setHasEscaped = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Player.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    abilitiesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Player}
 */
proto.types.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Player;
  return proto.types.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Player}
 */
proto.types.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Array<!proto.types.Ability>} */ (reader.readPackedEnum());
      msg.setAbilitiesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAbilitiesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.types.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Player} returns this
 */
proto.types.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Ability abilities = 2;
 * @return {!Array<!proto.types.Ability>}
 */
proto.types.Player.prototype.getAbilitiesList = function() {
  return /** @type {!Array<!proto.types.Ability>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.types.Ability>} value
 * @return {!proto.types.Player} returns this
 */
proto.types.Player.prototype.setAbilitiesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.types.Ability} value
 * @param {number=} opt_index
 * @return {!proto.types.Player} returns this
 */
proto.types.Player.prototype.addAbilities = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Player} returns this
 */
proto.types.Player.prototype.clearAbilitiesList = function() {
  return this.setAbilitiesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.GameState.repeatedFields_ = [4,5,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.GameState.prototype.toObject = function(opt_includeInstance) {
  return proto.types.GameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.GameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.GameState.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameStarted: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timerRunsOut: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tilesList: jspb.Message.toObjectList(msg.getTilesList(),
    proto.types.Tile.toObject, includeInstance),
    heistersList: jspb.Message.toObjectList(msg.getHeistersList(),
    proto.types.Heister.toObject, includeInstance),
    allItemsTaken: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    remainingTiles: jspb.Message.getFieldWithDefault(msg, 7, 0),
    gameStatus: jspb.Message.getFieldWithDefault(msg, 8, 0),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.types.Player.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.GameState}
 */
proto.types.GameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.GameState;
  return proto.types.GameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.GameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.GameState}
 */
proto.types.GameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGameStarted(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimerRunsOut(value);
      break;
    case 4:
      var value = new proto.types.Tile;
      reader.readMessage(value,proto.types.Tile.deserializeBinaryFromReader);
      msg.addTiles(value);
      break;
    case 5:
      var value = new proto.types.Heister;
      reader.readMessage(value,proto.types.Heister.deserializeBinaryFromReader);
      msg.addHeisters(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllItemsTaken(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRemainingTiles(value);
      break;
    case 8:
      var value = /** @type {!proto.types.GameStatus} */ (reader.readEnum());
      msg.setGameStatus(value);
      break;
    case 9:
      var value = new proto.types.Player;
      reader.readMessage(value,proto.types.Player.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.GameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.GameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.GameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.GameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameStarted();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTimerRunsOut();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.types.Tile.serializeBinaryToWriter
    );
  }
  f = message.getHeistersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.types.Heister.serializeBinaryToWriter
    );
  }
  f = message.getAllItemsTaken();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getRemainingTiles();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getGameStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.types.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional string game_name = 1;
 * @return {string}
 */
proto.types.GameState.prototype.getGameName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.GameState} returns this
 */
proto.types.GameState.prototype.setGameName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 game_started = 2;
 * @return {number}
 */
proto.types.GameState.prototype.getGameStarted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.GameState} returns this
 */
proto.types.GameState.prototype.setGameStarted = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 timer_runs_out = 3;
 * @return {number}
 */
proto.types.GameState.prototype.getTimerRunsOut = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.GameState} returns this
 */
proto.types.GameState.prototype.setTimerRunsOut = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Tile tiles = 4;
 * @return {!Array<!proto.types.Tile>}
 */
proto.types.GameState.prototype.getTilesList = function() {
  return /** @type{!Array<!proto.types.Tile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Tile, 4));
};


/**
 * @param {!Array<!proto.types.Tile>} value
 * @return {!proto.types.GameState} returns this
*/
proto.types.GameState.prototype.setTilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.types.Tile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Tile}
 */
proto.types.GameState.prototype.addTiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.types.Tile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.GameState} returns this
 */
proto.types.GameState.prototype.clearTilesList = function() {
  return this.setTilesList([]);
};


/**
 * repeated Heister heisters = 5;
 * @return {!Array<!proto.types.Heister>}
 */
proto.types.GameState.prototype.getHeistersList = function() {
  return /** @type{!Array<!proto.types.Heister>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Heister, 5));
};


/**
 * @param {!Array<!proto.types.Heister>} value
 * @return {!proto.types.GameState} returns this
*/
proto.types.GameState.prototype.setHeistersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.types.Heister=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Heister}
 */
proto.types.GameState.prototype.addHeisters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.types.Heister, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.GameState} returns this
 */
proto.types.GameState.prototype.clearHeistersList = function() {
  return this.setHeistersList([]);
};


/**
 * optional bool all_items_taken = 6;
 * @return {boolean}
 */
proto.types.GameState.prototype.getAllItemsTaken = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.GameState} returns this
 */
proto.types.GameState.prototype.setAllItemsTaken = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional uint32 remaining_tiles = 7;
 * @return {number}
 */
proto.types.GameState.prototype.getRemainingTiles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.GameState} returns this
 */
proto.types.GameState.prototype.setRemainingTiles = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional GameStatus game_status = 8;
 * @return {!proto.types.GameStatus}
 */
proto.types.GameState.prototype.getGameStatus = function() {
  return /** @type {!proto.types.GameStatus} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.types.GameStatus} value
 * @return {!proto.types.GameState} returns this
 */
proto.types.GameState.prototype.setGameStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * repeated Player players = 9;
 * @return {!Array<!proto.types.Player>}
 */
proto.types.GameState.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.types.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Player, 9));
};


/**
 * @param {!Array<!proto.types.Player>} value
 * @return {!proto.types.GameState} returns this
*/
proto.types.GameState.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.types.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Player}
 */
proto.types.GameState.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.types.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.GameState} returns this
 */
proto.types.GameState.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Move.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Move.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Move} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Move.toObject = function(includeInstance, msg) {
  var f, obj = {
    heisterColor: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: (f = msg.getPosition()) && proto.types.MapPosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Move}
 */
proto.types.Move.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Move;
  return proto.types.Move.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Move} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Move}
 */
proto.types.Move.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.types.HeisterColor} */ (reader.readEnum());
      msg.setHeisterColor(value);
      break;
    case 2:
      var value = new proto.types.MapPosition;
      reader.readMessage(value,proto.types.MapPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Move.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Move.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Move} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Move.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeisterColor();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.MapPosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional HeisterColor heister_color = 1;
 * @return {!proto.types.HeisterColor}
 */
proto.types.Move.prototype.getHeisterColor = function() {
  return /** @type {!proto.types.HeisterColor} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.types.HeisterColor} value
 * @return {!proto.types.Move} returns this
 */
proto.types.Move.prototype.setHeisterColor = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional MapPosition position = 2;
 * @return {?proto.types.MapPosition}
 */
proto.types.Move.prototype.getPosition = function() {
  return /** @type{?proto.types.MapPosition} */ (
    jspb.Message.getWrapperField(this, proto.types.MapPosition, 2));
};


/**
 * @param {?proto.types.MapPosition|undefined} value
 * @return {!proto.types.Move} returns this
*/
proto.types.Move.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.Move} returns this
 */
proto.types.Move.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.Move.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.InvalidRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.types.InvalidRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.InvalidRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.InvalidRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.InvalidRequest}
 */
proto.types.InvalidRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.InvalidRequest;
  return proto.types.InvalidRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.InvalidRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.InvalidRequest}
 */
proto.types.InvalidRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.InvalidRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.InvalidRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.InvalidRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.InvalidRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.types.InvalidRequest.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.InvalidRequest} returns this
 */
proto.types.InvalidRequest.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.types.MainMessage.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.types.MainMessage.BodyCase = {
  BODY_NOT_SET: 0,
  GAME_STATE: 1,
  INVALID_REQUEST: 2,
  MOVE: 3
};

/**
 * @return {proto.types.MainMessage.BodyCase}
 */
proto.types.MainMessage.prototype.getBodyCase = function() {
  return /** @type {proto.types.MainMessage.BodyCase} */(jspb.Message.computeOneofCase(this, proto.types.MainMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.MainMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.types.MainMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.MainMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MainMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameState: (f = msg.getGameState()) && proto.types.GameState.toObject(includeInstance, f),
    invalidRequest: (f = msg.getInvalidRequest()) && proto.types.InvalidRequest.toObject(includeInstance, f),
    move: (f = msg.getMove()) && proto.types.Move.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.MainMessage}
 */
proto.types.MainMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.MainMessage;
  return proto.types.MainMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.MainMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.MainMessage}
 */
proto.types.MainMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.GameState;
      reader.readMessage(value,proto.types.GameState.deserializeBinaryFromReader);
      msg.setGameState(value);
      break;
    case 2:
      var value = new proto.types.InvalidRequest;
      reader.readMessage(value,proto.types.InvalidRequest.deserializeBinaryFromReader);
      msg.setInvalidRequest(value);
      break;
    case 3:
      var value = new proto.types.Move;
      reader.readMessage(value,proto.types.Move.deserializeBinaryFromReader);
      msg.setMove(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.MainMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.MainMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.MainMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MainMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.GameState.serializeBinaryToWriter
    );
  }
  f = message.getInvalidRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.InvalidRequest.serializeBinaryToWriter
    );
  }
  f = message.getMove();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.types.Move.serializeBinaryToWriter
    );
  }
};


/**
 * optional GameState game_state = 1;
 * @return {?proto.types.GameState}
 */
proto.types.MainMessage.prototype.getGameState = function() {
  return /** @type{?proto.types.GameState} */ (
    jspb.Message.getWrapperField(this, proto.types.GameState, 1));
};


/**
 * @param {?proto.types.GameState|undefined} value
 * @return {!proto.types.MainMessage} returns this
*/
proto.types.MainMessage.prototype.setGameState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.types.MainMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.MainMessage} returns this
 */
proto.types.MainMessage.prototype.clearGameState = function() {
  return this.setGameState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MainMessage.prototype.hasGameState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InvalidRequest invalid_request = 2;
 * @return {?proto.types.InvalidRequest}
 */
proto.types.MainMessage.prototype.getInvalidRequest = function() {
  return /** @type{?proto.types.InvalidRequest} */ (
    jspb.Message.getWrapperField(this, proto.types.InvalidRequest, 2));
};


/**
 * @param {?proto.types.InvalidRequest|undefined} value
 * @return {!proto.types.MainMessage} returns this
*/
proto.types.MainMessage.prototype.setInvalidRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.types.MainMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.MainMessage} returns this
 */
proto.types.MainMessage.prototype.clearInvalidRequest = function() {
  return this.setInvalidRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MainMessage.prototype.hasInvalidRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Move move = 3;
 * @return {?proto.types.Move}
 */
proto.types.MainMessage.prototype.getMove = function() {
  return /** @type{?proto.types.Move} */ (
    jspb.Message.getWrapperField(this, proto.types.Move, 3));
};


/**
 * @param {?proto.types.Move|undefined} value
 * @return {!proto.types.MainMessage} returns this
*/
proto.types.MainMessage.prototype.setMove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.types.MainMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.MainMessage} returns this
 */
proto.types.MainMessage.prototype.clearMove = function() {
  return this.setMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MainMessage.prototype.hasMove = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.types.HeisterColor = {
  YELLOW: 0,
  PURPLE: 1,
  GREEN: 2,
  ORANGE: 3
};

/**
 * @enum {number}
 */
proto.types.HeisterSymbol = {
  SWORD: 0,
  VIAL: 1,
  BOW: 2,
  AXE: 3
};

/**
 * @enum {number}
 */
proto.types.HeisterName = {
  BARBARIAN: 0,
  MAGE: 1,
  ELF: 2,
  DWARF: 3
};

/**
 * @enum {number}
 */
proto.types.SquareType = {
  NORMAL: 0,
  YELLOW_TELEPORT_PAD: 1,
  PURPLE_TELEPORT_PAD: 2,
  GREEN_TELEPORT_PAD: 3,
  ORANGE_TELEPORT_PAD: 4,
  YELLOW_ITEM: 5,
  PURPLE_ITEM: 6,
  GREEN_ITEM: 7,
  ORANGE_ITEM: 8,
  YELLOW_ESCAPE: 9,
  PURPLE_ESCAPE: 10,
  GREEN_ESCAPE: 11,
  ORANGE_ESCAPE: 12,
  ESCALATOR: 13,
  TIMER_FLIP: 14,
  TIMER_FLIP_USED: 15,
  FILLED: 16
};

/**
 * @enum {number}
 */
proto.types.WallType = {
  CLEAR: 0,
  IMPASSABLE: 1,
  YELLOW_DOOR: 2,
  PURPLE_DOOR: 3,
  GREEN_DOOR: 4,
  ORANGE_DOOR: 5
};

/**
 * @enum {number}
 */
proto.types.Ability = {
  MOVE_NORTH: 0,
  MOVE_EAST: 1,
  MOVE_SOUTH: 2,
  MOVE_WEST: 3,
  TELEPORT: 4,
  REVEAL_TILES: 5,
  USE_ESCALATOR: 6
};

/**
 * @enum {number}
 */
proto.types.GameStatus = {
  STAGING: 0,
  ONGOING: 1,
  VICTORY: 2,
  DEFEAT: 3
};

goog.object.extend(exports, proto.types);
